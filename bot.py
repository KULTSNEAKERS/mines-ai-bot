from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import random

# üîê –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = '8468958146:AAHtc7OZzxyhIBWmqDvwq7Xv61F3KU3UL9A'
REF_LINK = 'https://bc.game/i-3to5iziqh-n/'
CHANNEL_LINK = 'https://t.me/minesaipredictor'

# –§–µ–π–∫–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
cells = ["A1", "A2", "A3", "A4", "A5", "B1", "B2", "B3", "B4", "B5",
         "C1", "C2", "C3", "C4", "C5", "D1", "D2", "D3", "D4", "D5",
         "E1", "E2", "E3", "E4", "E5"]
strategies = ["–†–æ–º–±", "–ó–º–µ–π–∫–∞", "–õ–µ—Å—Ç–Ω–∏—Ü–∞", "–î–∏–∞–≥–æ–Ω–∞–ª—å", "–°–µ–∫—Ç–æ—Ä", "–†–∞–Ω–¥–æ–º –≤–æ–ª–Ω–∞"]

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî —Ö—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ —É–∂–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–≥–Ω–æ–∑
predicted_users = set()

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data='predict')],
        [InlineKeyboardButton("üé∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–∑–∏–Ω–æ", url=REF_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AI Mines Predictor Bot*!\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–≥—Ä–æ–≤—ã–µ –ø–æ–ª—è MINES –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.\n\n"
        "üéØ *–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π*: –¥–æ 90%\n"
        "üß† *–ê–ª–≥–æ—Ä–∏—Ç–º—ã*: —Ä–æ–º–±, –∑–º–µ–π–∫–∞, –ª–µ—Å—Ç–Ω–∏—Ü–∞, —Å–ø–∏—Ä–∞–ª—å\n"
        f"üì¢ *–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏*: [@minesaipredictor]({CHANNEL_LINK})\n"
        f"üé∞ *–ò–≥—Ä–∞–π—Ç–µ —Å –ò–ò*: [BC.Game –ø–æ —Å—Å—ã–ª–∫–µ]({REF_LINK})\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

def predict_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–æ–≥–Ω–æ–∑
    if user_id in predicted_users:
        keyboard = [
            [InlineKeyboardButton("üé∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=REF_LINK)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        query.edit_message_text(
            text=(
                "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ BC.Game –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n\n"
                f"üîó {REF_LINK}"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º
    predicted_users.add(user_id)
    prediction = random.sample(cells, 3)
    strategy = random.choice(strategies)
    accuracy = random.randint(84, 97)

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')],
        [InlineKeyboardButton("üé∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–∑–∏–Ω–æ", url=REF_LINK)]
    ]

    query.edit_message_text(
        text=(
            f"üß† *–ò–ò –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!*\n"
            f"‚úÖ *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏*: {', '.join(prediction)}\n"
            f"üìà *–¢–æ—á–Ω–æ—Å—Ç—å*: {accuracy}%\n"
            f"üéØ *–ê–ª–≥–æ—Ä–∏—Ç–º*: {strategy}\n\n"
            f"üëâ –ò–≥—Ä–∞–π: {REF_LINK}"
        ),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def back_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data='predict')],
        [InlineKeyboardButton("üé∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–∑–∏–Ω–æ", url=REF_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
    ]
    query.edit_message_text(
        text=(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *AI Mines Predictor Bot*!\n\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–≥—Ä–æ–≤—ã–µ –ø–æ–ª—è MINES –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.\n\n"
            "üéØ *–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π*: –¥–æ 90%\n"
            "üß† *–ê–ª–≥–æ—Ä–∏—Ç–º—ã*: —Ä–æ–º–±, –∑–º–µ–π–∫–∞, –ª–µ—Å—Ç–Ω–∏—Ü–∞, —Å–ø–∏—Ä–∞–ª—å\n"
            f"üì¢ *–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏*: [@minesaipredictor]({CHANNEL_LINK})\n"
            f"üé∞ *–ò–≥—Ä–∞–π—Ç–µ —Å –ò–ò*: [BC.Game –ø–æ —Å—Å—ã–ª–∫–µ]({REF_LINK})\n\n"
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(predict_callback, pattern='^predict$'))
    dp.add_handler(CallbackQueryHandler(back_callback, pattern='^back$'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
